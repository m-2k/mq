.TH n2o_async 1 "n2o 4.5.0" "Synrc Research Center" "N2O Modules"
.SH NAME
n2o_async \- N2O Async: Supervised Processes
.SH INTRO
.LP
The \fIn2o_async\fR\& module is a simplified way to create
local protocols for Erlang/OTP \fIgen_server\fR\&. Each protocol
then can be spawned under Erlang/OTP supervision.
Such spawned protocol handlers can be selected by \fIn2o\fR\&
cache, which is ETS.
.SH proc(Message,#handler{}) -> {ok,#handler{}} | {reply,Out,#handler{}}.
.LP
The \fIproc/2\fR\& is a callback that will be called on each
\fIgen_server\fR\&'s calls: \fIhandle_call\fR\&,
\fIhandle_cast\fR\& and \fIhandle_info\fR\&, its \fIinit\fR\&
and \fIterminate\fR\&.
.SH async(Proc) -> type gen_server:call/2.
.LP
Spawns \fIproc/2\fR\& function inside gen_server under supervision.
.SH init(Pid,Class,Name) -> type gen_server:call/2.
.LP
Put Pid in \fIn2o\fR\& cache and also remember the caller
Pid for \fIn2o\fR\& messages.
.SH flush(Channel) -> type gen_server:call/2.
.LP
Send FLUSH message with current actions in process dictionary,
then cleanup all actions.
.SH send(Class,Name,Message) -> type gen_server:call/2.
.LP
Sends \fIgen_call\fR\& message to process by \fB{Class,Name}\fR\&
key, which was stored in cache during initialization.
.SH "ALSO"
.LP
\fB\fIn2o(1)\fR\&\fR\&, \fB\fIn2o_nitro(1)\fR\&\fR\&
